SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
}
MEMORY {
    ZP:       file = "", define = yes, start = $0055, size = $001A;
    LOADADDR: file = %O,               start = $03FE, size = $0002;
    HEADER:   file = %O,               start = $0400, size = $000D;
    RAM:      file = %O,               start = $040D, size = $7BF3 - __STACKSIZE__;
    FLOPPY:   file = %O,               start = $1100, size = __FLOPPYCODE_SIZE__;
}

SEGMENTS {
    LOADADDR:   load = LOADADDR, type = ro; # start address for LOAD
    EXEHDR:     load = HEADER,   type = ro; # BASIC line with SYS
    BASVER:     load = RAM,      type = ro; # detect BASIC version and patch vectors
    LOWCODE:    load = RAM,      type = ro,                optional = yes;
    INIT:       load = RAM,      type = ro,  define = yes, optional = yes;
    CODE:       load = RAM,      type = ro;
#   SMCODE:     load = RAM,      type = ro; # self-modifying code
    RODATA:     load = RAM,      type = ro; # constant data
    DATA:       load = RAM,      type = rw; # rw data with initial values to include into executable
#   ZPSAVE:     load = RAM,      type = bss;
    ZEROPAGE:   load = ZP,       type = zp;
    # floppy code is included in executable but executes in floppy at different location
    FLOPPY:     load = RAM,      type = rw, run = FLOPPY, define = yes, align_load = $100;
    # for some strange reasons, I feel like jump tables should get placed at the top of memory
    JUMPTABLE:  load = RAM,      type = rw;
    # Variables that are NOT included into executables. Moving this definition upwards is a lot of fun! 
    BSS:      load = RAM,      type = bss, define = yes, align = $100;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
